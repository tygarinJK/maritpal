<?php
/**
 * @file
 * Maritpal Account Balance
 */

/**
 * Implements hook_permission().
 */
function maritpal_account_balance_permission() {
  return array(
    'maritpal balance admin settings' => array(
      'title' => t('Administer settings'),
      'description' => t('Administrate account balance settings settings'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function maritpal_account_balance_menu() {
  $items = array();

  $items['admin/maritpal/settings/balance/add'] = array(
    'title' => t('Add transaction'),
    'description' => t(''),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('maritpal_account_balance_admin_transaction_form'),
    'access arguments' => array('maritpal balance admin settings'),
    'file' => 'includes/maritpal_account_balance.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/maritpal/settings/balance/autocomplete-user'] = array(
    'title' => t(''),
    'description' => t(''),
    'page callback' => '_maritpal_account_balance_user_mail_autocomplete',
    'access arguments' => array('maritpal balance admin settings'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function maritpal_account_balance_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'maritpal_account_balance') . '/includes/views',
  );
}

/**
 * Calculate Service Provider request fee amount.
 *
 * @param int $uid
 *  Service provider user id
 * @param obj $node
 *  Service request node id
 *
 * @return object
 *  Price object of FALSE
 */
function maritpal_account_balance_calculate_service_request_fee($account, $node) {
  if (!isset($account->field_serv_loc_city['und']) || 
      !isset($node->field_request_serv_cat['und']) ||
      !isset($node->field_date_and_time['und'][0]['value']) ||
      !isset($node->field_date_and_time['und'][0]['value2'])) {
        return FALSE;
      }

  $data = array(
    'acc_balance' => _commerce_account_balance_get_balance_raw($account),
    'location' => array(),
    'category' => $node->field_request_serv_cat['und'][0]['tid'],
    'date' => $node->field_date_and_time['und'][0],
    'mail' => $account->mail,
  );

  foreach ($account->field_serv_loc_city['und'] as $v) {
    $data['location'][] = $v['tid'];
  }

  // Price form request in provider`s location
  //    location - providers location 
  //    category - category of request
  //    date - date of request
  //    mail - provider`s mail
  $price = maritpal_services_old_calculate_request_service_price($data['location'], $data['category'], $data['date'], $data['mail']);
  if ($price === FALSE) return FALSE;

  // administer service provider fee
  $provider_fee = variable_get('maritpal_admin_sp_request_comission', 5);

  // provider need to pay
  $fee_amount = ($price->data->components->base_price / 100) * $provider_fee;
  
  return $fee_amount;
}

/**
 * Autocomplete callback
 *
 * @see maritpal_account_balance_menu()
 *
 * @param str #str
 *  Match string
 *
 * @return array
 *  User emails array
 */
function _maritpal_account_balance_user_mail_autocomplete($str) {
  $matches = array();

  $result = db_select('users', 'u')
    ->fields('u', array('mail'))
    ->condition('u.mail', '%' . db_like($str) . '%', 'LIKE')
    ->range(0, 10)
    ->execute();

  foreach ($result as $row) {
    $matches[$row->mail] = check_plain($row->mail);
  }
  
  // return for JS
  return drupal_json_output($matches);
}

/**
 * Write balance transaction to db.
 *
 * @param obj $account
 *  User account object
 * @param str $type
 *  Transaction type may be "deposit" or "purchase"
 * @param float $amount_decimal
 *  Transaction amount
 * @param str $currency
 *  (optional) Transaction currency code or will be used deafult currency
 * @param str $action
 *  (optional) Transaction description
 * @param int $order_id
 *  (optional) Transaction order id
 * 
 */
function maritpal_account_balance_transaction_new($account, $type, $amount_decimal, $currency_code = NULL, $action = NULL, $order_id = NULL) {
  if (is_null($currency_code)) $currency = commerce_currency_load();
  else $currency = commerce_currency_load($currency_code);

  $currency_symbol = $currency['symbol'];

  $formatted_amount = round($amount_decimal, 2, PHP_ROUND_HALF_UP) .' '. $currency_code;

  if (is_null($action)) {
    if ($amount_decimal > 0) $action = t('Deposit @amount to your account', array('@amount' => $formatted_amount));
    else $action = t('Perchase @amount from your account', array('@amount' => $formatted_amount));
  }

  $result = db_insert('maritpal_account_balance_transaction')
    ->fields(array(
      'type' => $type,
      'action' => $action,
      'uid' => $account->uid,
      'time' => REQUEST_TIME,
      'amount' => $amount_decimal,
      'currency_code' => $currency_code,
    ))
    ->execute();

  return is_numeric($result) ? $result : FALSE;
}

/**
 * Select balance transactions for specific account.
 *
 * @return array
 *  All user transactions
 */
function maritpal_account_balance_transaction_get($account) {
  $result = db_select('maritpal_account_balance_transaction', 'ab')
    ->fields('ab')
    ->condition('uid', $account->uid, '=')
    ->execute()
    ->fetchAll();

  return $result;
}